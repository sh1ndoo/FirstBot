import io
import sqlite3
from random import randint
import requests
from AI.text_to_image.sdxl import sdxl
import base64
from kb import main_keyboard, bin_inline_kb, img_inline_kb
from AI.text_to_text.gpt import gpt, trim_history, image_gen
from processing.commands import *

from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (CallbackQuery, Message)

BOT_TOKEN = '6976134083:AAEGZcK6QlmN9nQecOjIX66I71RlC32BzV4'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

conn = sqlite3.connect('users.db')
cursor = conn.cursor()

storage = MemoryStorage()

class FSMFillForm(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    gpt = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    deepseek = State()         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    sdxl = State()      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    mj = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    dall_e = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    bin_game = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç–∏



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–ª–ª–±—ç–∫ "cancel"
@dp.callback_query(lambda c: c.data == 'cancel')
async def process_callback_button1(callback_query: CallbackQuery):
    id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    if users[id]['in_game']:
        users[id]['in_game'] = False
        await bot.send_message(id, f'–•–∞-—Ö–∞, —è —É–º–Ω–µ–µ —Ç–µ–±—è, —É –º–µ–Ω—è –ø–∞–º—è—Ç–∏ {users[id]['secret_number']} –º–µ–≥–∞–±–∞–π—Ç!')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–ª–ª–±—ç–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@dp.callback_query(lambda c: c.data in ['dall-e-3', 'midjourney', 'flux-realism', 'flux-anime', 'flux', 'sdxl'])
async def process_callback_img(callback_query: CallbackQuery):
    id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    users[id]['img_model'] = callback_query.data
    await callback_query.answer('–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞')



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "GPT"
@dp.message(lambda x: x.text == 'GPT')
async def gpt_swap(message: Message):
    users[message.from_user.id]['chat_gpt'] = not users[message.from_user.id]['chat_gpt']
    if users[message.from_user.id]['chat_gpt']:
        await message.answer('GPT –≤–∫–ª—é—á–µ–Ω')
    else:
        users[message.from_user.id]['gpt_story'] = []
        await message.answer('GPT –≤—ã–∫–ª—é—á–µ–Ω, –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "Image Generator"
@dp.message(lambda x: x.text == 'Image Generator')
async def img_gen_mode_swap(message: Message):
    users[message.from_user.id]['image_gen'] = not users[message.from_user.id]['image_gen']
    if users[message.from_user.id]['image_gen']:
        await message.answer('''–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞
–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å''', reply_markup=img_inline_kb)
    else:
        await message.answer('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞')

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer(
        '–¢–µ–±–µ —É–∂–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç...'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫"
@dp.message(lambda x: x.text == '–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫')
async def playing_bin_game(message: Message):
    await message.answer('–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º... –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –º–Ω–æ–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100', reply_markup=bin_inline_kb)
    users[message.from_user.id]['secret_number'] = randint(1, 100)
    users[message.from_user.id]['in_game'] = True
    users[message.from_user.id]['attempts'] = 5


@dp.message(lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 100)
async def playing_game(message: Message):
    id = message.from_user.id
    if users[id]['in_game']:
        print(users[id]['secret_number'])
        if int(message.text) == users[id]['secret_number']:
            users[id]['in_game'] = False
            users[id]['total_games'] += 1
            users[id]['wins'] += 1
            users[id]['percent_bin_wins'] = users[id]['wins'] / users[id]['total_games'] * 100
            await message.answer('–ß–µ–ª–æ–≤–µ–∫ –æ–∫–∞–∑–∞–ª—Å—è —É–º–Ω–µ–µ –º–µ–Ω—è...')
        elif int(message.text) > users[id]['secret_number']:
            users[id]['attempts'] -= 1
            await message.answer(f'–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ\n–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {users[id]['attempts']} –ø–æ–ø—ã—Ç–æ–∫...', reply_markup=bin_inline_kb)
        elif int(message.text) < users[id]['secret_number']:
            users[id]['attempts'] -= 1
            await message.answer(f'–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ\n–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {users[id]['attempts']} –ø–æ–ø—ã—Ç–æ–∫...', reply_markup=bin_inline_kb)

        if users[id]['attempts'] == 0:
            users[id]['in_game'] = False
            users[id]['total_games'] += 1
            users[id]['percent_bin_wins'] = users[id]['wins'] / users[id]['total_games'] * 100 if users[id]['wins'] > 0 else 0
            await message.answer(f'–•–∞-—Ö–∞, —è —É–º–Ω–µ–µ —Ç–µ–±—è, —É –º–µ–Ω—è –ø–∞–º—è—Ç–∏ {users[id]['secret_number']} –º–µ–≥–∞–±–∞–π—Ç')
    else:
        await message.send_echo(message)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò–≥—Ä—ãüëæ"
@dp.message(lambda x: x.text == '–ò–≥—Ä—ãüëæ')
async def statistic(message: Message):
    id = message.from_user.id
    await message.answer(f'''
    –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫:
–ü–æ–±–µ–¥: {users[id]['wins']}
–í—Å–µ–≥–æ –∏–≥—Ä: {users[id]['total_games']}
–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {users[id]['wins'] / users[id]['total_games'] * 100 if users[id]['wins'] > 0 else 0}%''')


@dp.message()
async def send_gpt(message: Message):
    if users[message.from_user.id]['chat_gpt'] and not users[message.from_user.id]['image_gen']:
        image = None
        if message.photo:
            file_info = await bot.get_file(file_id=message.photo[-1].file_id)
            file_path = file_info.file_path
            file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
            print(file_url)
            image = requests.get(file_url, stream=True).raw
            users[message.from_user.id]['gpt_story'].append({'role': 'user', 'content': message.caption if message.caption else '.'})
        else:
            users[message.from_user.id]['gpt_story'].append({'role': 'user', 'content': message.text})
        response = await gpt(users[message.from_user.id]['gpt_story'], image)
        users[message.from_user.id]['gpt_story'].append({'role': 'assistant', 'content': response.choices[0].message.content})
        users[message.from_user.id]['gpt_story'] = trim_history(users[message.from_user.id]['gpt_story'])
        print(users[message.from_user.id]['gpt_story'])
        await message.answer(response.choices[0].message.content)
    elif not users[message.from_user.id]['chat_gpt'] and users[message.from_user.id]['image_gen']:
        if users[message.from_user.id]['img_model'] in ['sdxl-3d', 'sdxl-anime', 'sdxl-cinematic', 'sdxl-photo', 'sdxl-pixel', 'sdxl']:
            response = await sdxl(message.text)
            img_bytes = base64.b64decode(response[0].split(',')[1])
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            data = {'chat_id': message.chat.id}
            files = {'photo': io.BytesIO(img_bytes)}
            response_tg = requests.post(url, data=data, files=files)
            response_tg.raise_for_status()
            print(response_tg.json())
        else:
            response = await image_gen(message.text, users[message.from_user.id]['img_model'])
            image_url = response.data[0].url
            print(image_url)
            await message.answer_photo(image_url)
    else:
        await message.send_copy(chat_id=message.chat.id)

# dp.message.register(process_start_command, CommandStart(), StateFilter(default_state))
# dp.message.register(information, lambda x: x.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìù', StateFilter(default_state))
# dp.message.register(links, lambda x: x.text == '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏üîó', StateFilter(default_state))



if __name__ == '__main__':
    dp.run_polling(bot)
